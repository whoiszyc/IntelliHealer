:py:mod:`gym_power_res.envs.GYM_ENV_restoration_distribution`
=============================================================

.. py:module:: gym_power_res.envs.GYM_ENV_restoration_distribution


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gym_power_res.envs.GYM_ENV_restoration_distribution.RestorationDisEnvRL
   gym_power_res.envs.GYM_ENV_restoration_distribution.RestorationDisEnv
   gym_power_res.envs.GYM_ENV_restoration_distribution.RestorationDisEnv119
   gym_power_res.envs.GYM_ENV_restoration_distribution.RestorationDisVarConEnv




.. py:class:: RestorationDisEnvRL(max_disturbance, min_disturbance)

   Bases: :py:obj:`gym.Env`

   Restoration env for StableBaseline3 (reinforcement learning algorithm collections)

   .. py:attribute:: metadata
      

      

   .. py:method:: seed(self, seed=None)

      Sets the seed for this env's random number generator(s).

      Note:
          Some environments use multiple pseudorandom number generators.
          We want to capture all such seeds used in order to ensure that
          there aren't accidental correlations between multiple generators.

      Returns:
          list<bigint>: Returns the list of seeds used in this env's random
            number generators. The first value in the list should be the
            "main" seed, or the value which a reproducer should pass to
            'seed'. Often, the main seed equals the provided 'seed', but
            this won't be true if seed=None, for example.


   .. py:method:: reset(self, disturbance=None)

      Here we should setup the episode control for the total time horizon, which will be independent of individual segment simulation


   .. py:method:: step(self, action)

      Apply the given actions to the environment for one step


   .. py:method:: dict2list(self, dict)

      convert an order dict to a list


   .. py:method:: render(self, mode='human')

      Renders the environment.

      The set of supported modes varies per environment. (And some
      environments do not support rendering at all.) By convention,
      if mode is:

      - human: render to the current display or terminal and
        return nothing. Usually for human consumption.
      - rgb_array: Return an numpy.ndarray with shape (x, y, 3),
        representing RGB values for an x-by-y pixel image, suitable
        for turning into a video.
      - ansi: Return a string (str) or StringIO.StringIO containing a
        terminal-style text representation. The text can include newlines
        and ANSI escape sequences (e.g. for colors).

      Note:
          Make sure that your class's metadata 'render.modes' key includes
            the list of supported modes. It's recommended to call super()
            in implementations to use the functionality of this method.

      Args:
          mode (str): the mode to render with

      Example:

      class MyEnv(Env):
          metadata = {'render.modes': ['human', 'rgb_array']}

          def render(self, mode='human'):
              if mode == 'rgb_array':
                  return np.array(...) # return RGB frame suitable for video
              elif mode == 'human':
                  ... # pop up a window and render
              else:
                  super(MyEnv, self).render(mode=mode) # just raise an exception


   .. py:method:: close(self)

      Override close in your subclass to perform any necessary cleanup.

      Environments will automatically close() themselves when
      garbage collected or when the program exits.



.. py:class:: RestorationDisEnv(max_disturbance, min_disturbance)

   Bases: :py:obj:`gym.Env`

   Restoration env for imitation learning

   .. py:attribute:: metadata
      

      

   .. py:method:: seed(self, seed=None)

      Sets the seed for this env's random number generator(s).

      Note:
          Some environments use multiple pseudorandom number generators.
          We want to capture all such seeds used in order to ensure that
          there aren't accidental correlations between multiple generators.

      Returns:
          list<bigint>: Returns the list of seeds used in this env's random
            number generators. The first value in the list should be the
            "main" seed, or the value which a reproducer should pass to
            'seed'. Often, the main seed equals the provided 'seed', but
            this won't be true if seed=None, for example.


   .. py:method:: reset(self, disturbance=None)

      Here we should setup the episode control for the total time horizon, which will be independent of individual segment simulation


   .. py:method:: step(self, action)

      Apply the given actions to the environment for one step


   .. py:method:: dict2list(self, dict)

      convert an order dict to a list


   .. py:method:: render(self, mode='human')

      Renders the environment.

      The set of supported modes varies per environment. (And some
      environments do not support rendering at all.) By convention,
      if mode is:

      - human: render to the current display or terminal and
        return nothing. Usually for human consumption.
      - rgb_array: Return an numpy.ndarray with shape (x, y, 3),
        representing RGB values for an x-by-y pixel image, suitable
        for turning into a video.
      - ansi: Return a string (str) or StringIO.StringIO containing a
        terminal-style text representation. The text can include newlines
        and ANSI escape sequences (e.g. for colors).

      Note:
          Make sure that your class's metadata 'render.modes' key includes
            the list of supported modes. It's recommended to call super()
            in implementations to use the functionality of this method.

      Args:
          mode (str): the mode to render with

      Example:

      class MyEnv(Env):
          metadata = {'render.modes': ['human', 'rgb_array']}

          def render(self, mode='human'):
              if mode == 'rgb_array':
                  return np.array(...) # return RGB frame suitable for video
              elif mode == 'human':
                  ... # pop up a window and render
              else:
                  super(MyEnv, self).render(mode=mode) # just raise an exception


   .. py:method:: close(self)

      Override close in your subclass to perform any necessary cleanup.

      Environments will automatically close() themselves when
      garbage collected or when the program exits.



.. py:class:: RestorationDisEnv119(max_disturbance, min_disturbance)

   Bases: :py:obj:`gym.Env`

   Restoration env for imitation learning

   .. py:attribute:: metadata
      

      

   .. py:method:: seed(self, seed=None)

      Sets the seed for this env's random number generator(s).

      Note:
          Some environments use multiple pseudorandom number generators.
          We want to capture all such seeds used in order to ensure that
          there aren't accidental correlations between multiple generators.

      Returns:
          list<bigint>: Returns the list of seeds used in this env's random
            number generators. The first value in the list should be the
            "main" seed, or the value which a reproducer should pass to
            'seed'. Often, the main seed equals the provided 'seed', but
            this won't be true if seed=None, for example.


   .. py:method:: reset(self, disturbance=None)

      Here we should setup the episode control for the total time horizon, which will be independent of individual segment simulation


   .. py:method:: step(self, action)

      Apply the given actions to the environment for one step


   .. py:method:: dict2list(self, dict)

      convert an order dict to a list


   .. py:method:: render(self, mode='human')

      Renders the environment.

      The set of supported modes varies per environment. (And some
      environments do not support rendering at all.) By convention,
      if mode is:

      - human: render to the current display or terminal and
        return nothing. Usually for human consumption.
      - rgb_array: Return an numpy.ndarray with shape (x, y, 3),
        representing RGB values for an x-by-y pixel image, suitable
        for turning into a video.
      - ansi: Return a string (str) or StringIO.StringIO containing a
        terminal-style text representation. The text can include newlines
        and ANSI escape sequences (e.g. for colors).

      Note:
          Make sure that your class's metadata 'render.modes' key includes
            the list of supported modes. It's recommended to call super()
            in implementations to use the functionality of this method.

      Args:
          mode (str): the mode to render with

      Example:

      class MyEnv(Env):
          metadata = {'render.modes': ['human', 'rgb_array']}

          def render(self, mode='human'):
              if mode == 'rgb_array':
                  return np.array(...) # return RGB frame suitable for video
              elif mode == 'human':
                  ... # pop up a window and render
              else:
                  super(MyEnv, self).render(mode=mode) # just raise an exception


   .. py:method:: close(self)

      Override close in your subclass to perform any necessary cleanup.

      Environments will automatically close() themselves when
      garbage collected or when the program exits.



.. py:class:: RestorationDisVarConEnv(max_disturbance, min_disturbance)

   Bases: :py:obj:`gym.Env`

   Restoration env with tieline and reactive power dispatch control

   .. py:attribute:: metadata
      

      

   .. py:method:: seed(self, seed=None)

      Sets the seed for this env's random number generator(s).

      Note:
          Some environments use multiple pseudorandom number generators.
          We want to capture all such seeds used in order to ensure that
          there aren't accidental correlations between multiple generators.

      Returns:
          list<bigint>: Returns the list of seeds used in this env's random
            number generators. The first value in the list should be the
            "main" seed, or the value which a reproducer should pass to
            'seed'. Often, the main seed equals the provided 'seed', but
            this won't be true if seed=None, for example.


   .. py:method:: reset(self, disturbance=None)

      Here we should setup the episode control for the total time horizon, which will be independent of individual segment simulation


   .. py:method:: step(self, action, logger=None)

      Apply the given actions to the environment for one step
      Action here is a dictionary with "tieline" and "varcon"


   .. py:method:: view_grid(self)


   .. py:method:: render(self, mode='human')

      Renders the environment.

      The set of supported modes varies per environment. (And some
      environments do not support rendering at all.) By convention,
      if mode is:

      - human: render to the current display or terminal and
        return nothing. Usually for human consumption.
      - rgb_array: Return an numpy.ndarray with shape (x, y, 3),
        representing RGB values for an x-by-y pixel image, suitable
        for turning into a video.
      - ansi: Return a string (str) or StringIO.StringIO containing a
        terminal-style text representation. The text can include newlines
        and ANSI escape sequences (e.g. for colors).

      Note:
          Make sure that your class's metadata 'render.modes' key includes
            the list of supported modes. It's recommended to call super()
            in implementations to use the functionality of this method.

      Args:
          mode (str): the mode to render with

      Example:

      class MyEnv(Env):
          metadata = {'render.modes': ['human', 'rgb_array']}

          def render(self, mode='human'):
              if mode == 'rgb_array':
                  return np.array(...) # return RGB frame suitable for video
              elif mode == 'human':
                  ... # pop up a window and render
              else:
                  super(MyEnv, self).render(mode=mode) # just raise an exception


   .. py:method:: close(self)

      Override close in your subclass to perform any necessary cleanup.

      Environments will automatically close() themselves when
      garbage collected or when the program exits.



