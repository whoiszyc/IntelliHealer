import numpy as np


def case33_basecase():

    # define the network data as a dictionary named ppc
    ppc={}

    ppc["basemva"]=1
# %  0---Load bus, 1---Slack bus,  2---Generator bus
# %        IEEE 33-node feeder
# %        Bus Bus  Voltage Angle   ---Load----        ------Generator-----    Injected
# %        No  code Mag.    Degree   MW       Mvar      MW  Mvar     Qmin Qmax       Mvar
    ppc["bus"] = np.array([
        [1,   1,    1.060,   0.0,     0.010,   0.000,       0.000,   0.000,   0,   0,       0],
        [2,   0,    1.043,   0.0,     0.100,   0.006,       0.000,   0.000,   0,   0,       0],
        [3,   0,    1.000,   0.0,     0.090,   0.040,       0.000,   0.000,   0,   0,       0],
        [4,   0,    1.060,   0.0,     0.120,   0.080,       0.000,   0.000,   0,   0,       0],
        [5,   0,    1.010,   0.0,     0.060,   0.030,       0.000,   0.000,   0,   0,       0],
        [6,   0,    1.0,     0.0,     0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [7,   0,    1.0,     0.0,     0.200,   0.100,       0.000,   0.000,   0,   0,       0],
        [8,   0,    1.03,    0.0,     0.200,   0.100,       0.000,   0.000,   0,   0,       0],
        [9,   0,    1.0,     0.0,     0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [10,   0,   1.0,     0.0,     0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [11,   0,   1.0,     0.0,     0.045,   0.030,       0.000,   0.000,   0,   0,       0],
        [12,   0,   1.0,     0.0,     0.060,   0.035,       0.000,   0.000,   0,   0,       0],
        [13,   0,   1.0,     0.0,     0.060,   0.035,       0.000,   0.000,   0,   0,       0],
        [14,   0,    1,      0,       0.120,   0.080,       0.000,   0.000,   0,   0,       0],
        [15,   0,    1,      0,       0.060,   0.010,       0.000,   0.000,   0,   0,       0],
        [16,   0,   1,      0,       0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [17,   0,    1,       0,       0.060,   0.020,      0.000,   0.000,   0,   0,       0],
        [18,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [19,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [20,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [21,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [22,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [23,   0,    1,       0,       0.090,   0.050,      0.000,   0.000,   0,   0,       0],
        [24,   0,    1,       0,       0.420,   0.200,      0.000,   0.000,   0,   0,       0],  # active power large
        [25,   0,    1,       0,       0.420,   0.200,      0.000,   0.000,   0,   0,       0],  # active power large
        [26,   0,    1,       0,       0.060,   0.025,      0.000,   0.000,   0,   0,       0],
        [27,   0,    1,       0,       0.060,   0.025,      0.000,   0.000,   0,   0,       0],
        [28,   0,    1,       0,       0.060,   0.020,      0.000,   0.000,   0,   0,       0],
        [29,   0,    1,       0,       0.120,   0.070,      0.000,   0.000,   0,   0,       0],
        [30,   0,    1,       0,       0.200,   0.600,      0.000,   0.000,   0,   0,       0],  # reactive power large
        [31,   0,    1,       0,       0.150,   0.070,      0.000,   0.000,   0,   0,       0],
        [32,   0,    1,       0,       0.210,   0.100,      0.000,   0.000,   0,   0,       0],
        [33,   0,    1,       0,       0.060,   0.040,      1.000,   0.000,   0,   0,       0]
        ])

#         No  from-bus  to-bus  R  X  Pmax  Qmax
    ppc["line"] = np.array([
          [1,   1,   2,   0.000574,   0.000293,       5,           5],
          [2,   2,   3,   0.003070,   0.001564,       5,           5],
          [3,   3,   4,   0.002279,   0.001209,       5,           5],
          [4,   4,   5,   0.002373,   0.001209,       5,           5],
          [5,   5,   6,   0.005100,   0.004402,       5,           5],
          [6,   6,   7,   0.001166,   0.003853,       5,           5],
          [7,   7,   8,   0.004430,   0.001464,       5,           5],
          [8,   8,   9,   0.006413,   0.004608,       5,           5],
          [9,   9,   10,  0.006501,   0.004608,       5,           5],
          [10,  10,  11,  0.001224,   0.000405,       5,           5],
          [11,  11,  12,  0.002331,   0.000771,       5,           5],
          [12,  12,  13,  0.009141,   0.007192,       5,           5],
          [13,  13,  14,  0.003372,   0.004439,       5,           5],
          [14,  14,  15,  0.003680,   0.003275,       5,           5],
          [15,  15,  16,  0.004647,   0.003275,       5,           5],
          [16,  16,  17,  0.008026,   0.010716,       5,           5],
          [17,  17,  18,  0.004558,   0.003574,       5,           5],
          [18,  2,   19,   0.001021,   0.000974,      5,           5],
          [19,  19,  20,  0.009366,   0.008440,       5,           5],
          [20,  20,  21,  0.002550,   0.002979,       5,           5],
          [21,  21,  22,  0.004414,   0.005836,       5,           5],
          [22,  3,   23,   0.002809,   0.001920,      5,           5],
          [23,  23,  24,  0.005592,   0.004415,       5,           5],
          [24,  24,  25,  0.005579,   0.004366,       5,           5],
          [25,  6,   26,   0.001264,   0.000644,      5,           5],
          [26,  26,  27,  0.001770,   0.000901,       5,           5],
          [27,  27,  28,  0.006594,   0.005814,       5,           5],
          [28,  28,  29,  0.005007,   0.004362,       5,           5],
          [29,  29,  30,  0.003160,   0.001610,       5,           5],
          [30,  30,  31,  0.006067,   0.005996,       5,           5],
          [31,  31,  32,  0.001933,   0.002253,       5,           5],
          [32,  32,  33,  0.002123,   0.003301,       5,           5]
        ])
    #  gen index, gen bus, Pmin, Pmax, Qmin, Qmax
    ppc["gen"] = np.array([
        [1, 1, 0, 100, -100, 100]
    ])

    ppc['tieline'] = []

    # call data pre-processing functions
    ppc = get_iterator(ppc)
    ppc = get_bus_line_gen(ppc)
    ppc = get_total_load(ppc)

    return ppc




def case33_tieline():

    # define the network data as a dictionary named ppc
    ppc={}

    ppc["basemva"]=1
# %  0---Load bus, 1---Slack bus,  2---Generator bus
# %        IEEE 33-node feeder
# %        Bus Bus  Voltage Angle   ---Load----        ------Generator-----   Injected
# %        No  code Mag.    Degree   MW       Mvar          MW      Mvar     Qmin Qmax     Mvar
    ppc["bus"] = np.array([
        [1,   1,    1.060,   0.0,     0.010,   0.000,       0.000,   0.000,   0,   0,       0],
        [2,   0,    1.043,   0.0,     0.100,   0.006,       0.000,   0.000,   0,   0,       0],
        [3,   0,    1.000,   0.0,     0.090,   0.040,       0.000,   0.000,   0,   0,       0],
        [4,   0,    1.060,   0.0,     0.120,   0.080,       0.000,   0.000,   0,   0,       0],
        [5,   0,    1.010,   0.0,     0.060,   0.030,       0.000,   0.000,   0,   0,       0],
        [6,   0,    1.0,     0.0,     0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [7,   0,    1.0,     0.0,     0.200,   0.100,       0.000,   0.000,   0,   0,       0],
        [8,   0,    1.03,    0.0,     0.200,   0.100,       0.000,   0.000,   0,   0,       0],
        [9,   0,    1.0,     0.0,     0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [10,   0,   1.0,     0.0,     0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [11,   0,   1.0,     0.0,     0.045,   0.030,       0.000,   0.000,   0,   0,       0],
        [12,   0,   1.0,     0.0,     0.060,   0.035,       0.000,   0.000,   0,   0,       0],
        [13,   0,   1.0,     0.0,     0.060,   0.035,       0.000,   0.000,   0,   0,       0],
        [14,   0,    1,      0,       0.120,   0.080,       0.000,   0.000,   0,   0,       0],
        [15,   0,    1,      0,       0.060,   0.010,       0.000,   0.000,   0,   0,       0],
        [16,   0,    1,      0,       0.060,   0.020,       0.000,   0.000,   0,   0,       0],
        [17,   0,    1,       0,       0.060,   0.020,      0.000,   0.000,   0,   0,       0],
        [18,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [19,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [20,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [21,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [22,   0,    1,       0,       0.090,   0.040,      0.000,   0.000,   0,   0,       0],
        [23,   0,    1,       0,       0.090,   0.050,      0.000,   0.000,   0,   0,       0],
        [24,   0,    1,       0,       0.420,   0.200,      0.000,   0.000,   0,   0,       0],  # active power large
        [25,   0,    1,       0,       0.420,   0.200,      0.000,   0.000,   0,   0,       0],  # active power large
        [26,   0,    1,       0,       0.060,   0.025,      0.000,   0.000,   0,   0,       0],
        [27,   0,    1,       0,       0.060,   0.025,      0.000,   0.000,   0,   0,       0],
        [28,   0,    1,       0,       0.060,   0.020,      0.000,   0.000,   0,   0,       0],
        [29,   0,    1,       0,       0.120,   0.070,      0.000,   0.000,   0,   0,       0],
        [30,   0,    1,       0,       0.200,   0.600,      0.000,   0.000,   0,   0,       0],  # reactive power large
        [31,   0,    1,       0,       0.150,   0.070,      0.000,   0.000,   0,   0,       0],
        [32,   0,    1,       0,       0.210,   0.100,      0.000,   0.000,   0,   0,       0],
        [33,   0,    1,       0,       0.060,   0.040,      1.000,   0.000,   0,   0,       0]
        ])

#         No  from-bus  to-bus  R  X                 Pmax       Qmax     if-damage   if-operation
    ppc["line"] = np.array([
          [1,   1,   2,   0.000574,   0.000293,       5,           5],
          [2,   2,   3,   0.003070,   0.001564,       5,           5],
          [3,   3,   4,   0.002279,   0.001209,       5,           5],
          [4,   4,   5,   0.002373,   0.001209,       5,           5],
          [5,   5,   6,   0.005100,   0.004402,       5,           5],
          [6,   6,   7,   0.001166,   0.003853,       5,           5],
          [7,   7,   8,   0.004430,   0.001464,       5,           5],
          [8,   8,   9,   0.006413,   0.004608,       5,           5],
          [9,   9,   10,  0.006501,   0.004608,       5,           5],
          [10,  10,  11,  0.001224,   0.000405,       5,           5],
          [11,  11,  12,  0.002331,   0.000771,       5,           5],
          [12,  12,  13,  0.009141,   0.007192,       5,           5],
          [13,  13,  14,  0.003372,   0.004439,       5,           5],
          [14,  14,  15,  0.003680,   0.003275,       5,           5],
          [15,  15,  16,  0.004647,   0.003275,       5,           5],
          [16,  16,  17,  0.008026,   0.010716,       5,           5],
          [17,  17,  18,  0.004558,   0.003574,       5,           5],
          [18,  2,   19,   0.001021,   0.000974,      5,           5],
          [19,  19,  20,  0.009366,   0.008440,       5,           5],
          [20,  20,  21,  0.002550,   0.002979,       5,           5],
          [21,  21,  22,  0.004414,   0.005836,       5,           5],
          [22,  3,   23,   0.002809,   0.001920,      5,           5],
          [23,  23,  24,  0.005592,   0.004415,       5,           5],
          [24,  24,  25,  0.005579,   0.004366,       5,           5],
          [25,  6,   26,   0.001264,   0.000644,      5,           5],
          [26,  26,  27,  0.001770,   0.000901,       5,           5],
          [27,  27,  28,  0.006594,   0.005814,       5,           5],
          [28,  28,  29,  0.005007,   0.004362,       5,           5],
          [29,  29,  30,  0.003160,   0.001610,       5,           5],
          [30,  30,  31,  0.006067,   0.005996,       5,           5],
          [31,  31,  32,  0.001933,   0.002253,       5,           5],
          [32,  32,  33,  0.002123,   0.003301,       5,           5],
          [33,  8,   21,   0.012453,   0.012453,      5,           5],  # tie-line
          [34,  9,   15,  0.012453,   0.012453,       5,           5],  # tie-line
          [35,  12,  22,  0.012453,   0.012453,       5,           5],  # tie-line
          [36,  18,  33,  0.003113,   0.003113,       5,           5],  # tie-line
          [37,  25,  29,  0.003113,   0.003113,       5,           5]   # tie-line
        ])

    ppc['tieline'] = ['line_33', 'line_34', 'line_35', 'line_36', 'line_37']

    #  gen index, gen bus, Pmin, Pmax, Qmin, Qmax
    ppc["gen"] = np.array([
        [1, 1, 0, 100, -100, 100]
    ])

    # call data pre-processing functions
    ppc = get_iterator(ppc)
    ppc = get_bus_line_gen(ppc)
    ppc = get_total_load(ppc)

    return ppc


def case119_tieline():

    # define the network data as a dictionary named ppc
    ppc={}

    ppc["basewatt"] = 1000000
    ppc["basevolt"] = 11000
# %  0---Load bus, 1---Slack bus,  2---Generator bus
# %        IEEE 33-node feeder
# %        Bus Bus  Voltage Angle   ---Load----        ------Generator-----   Injected
# %        No  code  Mag.    Degree     MW     Mvar          MW      Mvar     Qmin Qmax     Mvar
    # we put very small load at buses whose original loads are zero, otherwise the binary solution associated with this bus will be zero
    ppc["bus"] = np.array([
        [1,   1,    1.060,   0.0,     0.001,   0.001,       0.000,   0.000,   0,   0,       0],
        [2,   0,    1.043,   0.0,     0.133,   0.101,       0.000,   0.000,   0,   0,       0],
        [3,   0,    1.000,   0.0,     0.016,   0.011,       0.000,   0.000,   0,   0,       0],
        [4,   0,    1.060,   0.0,     0.034,   0.021,       0.000,   0.000,   0,   0,       0],
        [5,   0,    1.010,   0.0,     0.073,   0.063,       0.000,   0.000,   0,   0,       0],
        [6,   0,    1.0,     0.0,     0.144,   0.068,       0.000,   0.000,   0,   0,       0],
        [7,   0,    1.0,     0.0,     0.104,   0.061,       0.000,   0.000,   0,   0,       0],
        [8,   0,    1.03,    0.0,     0.028,   0.011,       0.000,   0.000,   0,   0,       0],
        [9,   0,    1.0,     0.0,     0.087,   0.051,       0.000,   0.000,   0,   0,       0],
        [10,   0,   1.0,     0.0,     0.198,   0.106,       0.000,   0.000,   0,   0,       0],
        [11,   0,   1.0,     0.0,     0.146,   0.075,       0.000,   0.000,   0,   0,       0],
        [12,   0,   1.0,     0.0,     0.026,   0.018,       0.000,   0.000,   0,   0,       0],
        [13,   0,   1.0,     0.0,     0.052,   0.023,       0.000,   0.000,   0,   0,       0],
        [14,   0,    1,      0,       0.141,   0.117,       0.000,   0.000,   0,   0,       0],
        [15,   0,    1,      0,       0.021,   0.028,       0.000,   0.000,   0,   0,       0],
        [16,   0,    1,      0,       0.033,   0.026,       0.000,   0.000,   0,   0,       0],
        [17,   0,    1,       0,       0.032,   0.025,      0.000,   0.000,   0,   0,       0],
        [18,   0,    1,       0,       0.020,   0.011,      0.000,   0.000,   0,   0,       0],
        [19,   0,    1,       0,       0.156,   0.078,      0.000,   0.000,   0,   0,       0],
        [20,   0,    1,       0,       0.546,   0.351,      0.000,   0.000,   0,   0,       0],
        [21,   0,    1,       0,       0.180,   0.164,      0.000,   0.000,   0,   0,       0],
        [22,   0,    1,       0,       0.093,   0.054,      0.000,   0.000,   0,   0,       0],
        [23,   0,    1,       0,       0.085,   0.039,      0.000,   0.000,   0,   0,       0],
        [24,   0,    1,       0,       0.168,   0.095,      0.000,   0.000,   0,   0,       0],
        [25,   0,    1,       0,       0.125,   0.150,      0.000,   0.000,   0,   0,       0],
        [26,   0,    1,       0,       0.016,   0.024,      0.000,   0.000,   0,   0,       0],
        [27,   0,    1,       0,       0.026,   0.024,      0.000,   0.000,   0,   0,       0],  # end of the first subbranch
        [29,   0,    1,       0,       0.594,   0.522,      0.000,   0.000,   0,   0,       0],  # index jump
        [30,   0,    1,       0,       0.120,   0.059,      0.000,   0.000,   0,   0,       0],
        [31,   0,    1,       0,       0.102,   0.099,      0.000,   0.000,   0,   0,       0],
        [32,   0,    1,       0,       0.513,   0.318,      0.000,   0.000,   0,   0,       0],
        [33,   0,    1,       0,       0.475,   0.456,      0.000,   0.000,   0,   0,       0],
        [34,   0,    1,       0,       0.151,   0.136,      1.000,   0.000,   0,   0,       0],
        [35,    0,   1,       0,       0.205,   0.083,      1.000,    0.000,  0,   0,       0],
        [36, 0, 1, 0, 0.131, 0.093, 1.000, 0.000, 0, 0, 0],
        [37, 0, 1, 0, 0.448, 0.369, 1.000, 0.000, 0, 0, 0],
        [38, 0, 1, 0, 0.440, 0.321, 1.000, 0.000, 0, 0, 0],
        [40, 0, 1, 0, 0.112, 0.055, 1.000, 0.000, 0, 0, 0],
        [41, 0, 1, 0, 0.053, 0.038, 1.000, 0.000, 0, 0, 0],# index jump
        [42, 0, 1, 0, 0.393, 0.342, 1.000, 0.000, 0, 0, 0],
        [43, 0, 1, 0, 0.326, 0.278, 1.000, 0.000, 0, 0, 0],
        [44, 0, 1, 0, 0.536, 0.240, 1.000, 0.000, 0, 0, 0],
        [45, 0, 1, 0, 0.076, 0.066, 1.000, 0.000, 0, 0, 0],
        [46, 0, 1, 0, 0.053, 0.039, 1.000, 0.000, 0, 0, 0],
        [47, 0, 1, 0, 0.040, 0.031, 1.000, 0.000, 0, 0, 0],
        [48, 0, 1, 0, 0.039, 0.020, 1.000, 0.000, 0, 0, 0],
        [49, 0, 1, 0, 0.066, 0.042, 1.000, 0.000, 0, 0, 0],
        [50, 0, 1, 0, 0.073, 0.051, 1.000, 0.000, 0, 0, 0],
        [51, 0, 1, 0, 0.114, 0.057, 1.000, 0.000, 0, 0, 0],
        [52, 0, 1, 0, 0.918, 1.205, 1.000, 0.000, 0, 0, 0],
        [53, 0, 1, 0, 0.210, 0.146, 1.000, 0.000, 0, 0, 0],
        [54, 0, 1, 0, 0.066, 0.056, 1.000, 0.000, 0, 0, 0],
        [55, 0, 1, 0, 0.042, 0.040, 1.000, 0.000, 0, 0, 0],
        [56, 0, 1, 0, 0.433, 0.283, 1.000, 0.000, 0, 0, 0],
        [58, 0, 1, 0, 0.062, 0.026, 1.000, 0.000, 0, 0, 0],
        [59, 0, 1, 0, 0.092, 0.088, 1.000, 0.000, 0, 0, 0],
        [60, 0, 1, 0, 0.085, 0.055, 1.000, 0.000, 0, 0, 0],# index jump
        [61, 0, 1, 0, 0.345, 0.332, 1.000, 0.000, 0, 0, 0],
        [62, 0, 1, 0, 0.022, 0.016, 1.000, 0.000, 0, 0, 0],
        [63, 0, 1, 0, 0.080, 0.049, 1.000, 0.000, 0, 0, 0],
        [64, 0, 1, 0, 0.095, 0.090, 1.000, 0.000, 0, 0, 0],
        [65, 0, 1, 0, 0.062, 0.047, 1.000, 0.000, 0, 0, 0],
        [66, 0, 1, 0, 0.478, 0.463, 1.000, 0.000, 0, 0, 0],
        [67, 0, 1, 0, 0.120, 0.052, 1.000, 0.000, 0, 0, 0],
        [68, 0, 1, 0, 0.139, 0.100, 1.000, 0.000, 0, 0, 0],
        [69, 0, 1, 0, 0.391, 0.193, 1.000, 0.000, 0, 0, 0],
        [70, 0, 1, 0, 0.027, 0.026, 1.000, 0.000, 0, 0, 0],
        [71, 0, 1, 0, 0.052, 0.025, 1.000, 0.000, 0, 0, 0],
        [72, 0, 1, 0, 0.066, 0.038, 1.000, 0.000, 0, 0, 0],
        [73, 0, 1, 0, 0.467, 0.395, 1.000, 0.000, 0, 0, 0],
        [74, 0, 1, 0, 0.594, 0.239, 1.000, 0.000, 0, 0, 0],
        [75, 0, 1, 0, 0.132, 0.084, 1.000, 0.000, 0, 0, 0],
        [76, 0, 1, 0, 0.052, 0.022, 1.000, 0.000, 0, 0, 0],
        [77, 0, 1, 0, 0.869, 0.614, 1.000, 0.000, 0, 0, 0],
        [78, 0, 1, 0, 0.031, 0.029, 1.000, 0.000, 0, 0, 0],
        [79, 0, 1, 0, 0.192, 0.122, 1.000, 0.000, 0, 0, 0],
        [80, 0, 1, 0, 0.065, 0.045, 1.000, 0.000, 0, 0, 0],
        [81, 0, 1, 0, 0.238, 0.223, 1.000, 0.000, 0, 0, 0],
        [82, 0, 1, 0, 0.294, 0.162, 1.000, 0.000, 0, 0, 0],
        [83, 0, 1, 0, 0.485, 0.437, 1.000, 0.000, 0, 0, 0],
        [84, 0, 1, 0, 0.243, 0.183, 1.000, 0.000, 0, 0, 0],
        [85, 0, 1, 0, 0.243, 0.183, 1.000, 0.000, 0, 0, 0],
        [86, 0, 1, 0, 0.134, 0.119, 1.000, 0.000, 0, 0, 0],
        [87, 0, 1, 0, 0.022, 0.027, 1.000, 0.000, 0, 0, 0],
        [88, 0, 1, 0, 0.049, 0.026, 1.000, 0.000, 0, 0, 0],
        [89, 0, 1, 0, 0.383, 0.257, 1.000, 0.000, 0, 0, 0],
        [90, 0, 1, 0, 0.049, 0.020, 1.000, 0.000, 0, 0, 0],
        [91, 0, 1, 0, 0.022, 0.011, 1.000, 0.000, 0, 0, 0],
        [93, 0, 1, 0, 0.062, 0.042, 1.000, 0.000, 0, 0, 0],
        [94, 0, 1, 0, 0.030, 0.034, 1.000, 0.000, 0, 0, 0],
        [95, 0, 1, 0, 0.062, 0.066, 1.000, 0.000, 0, 0, 0],
        [96, 0, 1, 0, 0.114, 0.081, 1.000, 0.000, 0, 0, 0], # index jump
        [97, 0, 1, 0, 0.081, 0.066, 1.000, 0.000, 0, 0, 0],
        [98, 0, 1, 0, 0.031, 0.015, 1.000, 0.000, 0, 0, 0],
        [99, 0, 1, 0, 0.033, 0.060, 1.000, 0.000, 0, 0, 0],
        [100, 0, 1, 0, 0.531, 0.224, 1.000, 0.000, 0, 0, 0],
        [101, 0, 1, 0, 0.507, 0.367, 1.000, 0.000, 0, 0, 0],
        [102, 0, 1, 0, 0.026, 0.011, 1.000, 0.000, 0, 0, 0],
        [103, 0, 1, 0, 0.045, 0.030, 1.000, 0.000, 0, 0, 0],
        [105, 0, 1, 0, 0.100, 0.047, 1.000, 0.000, 0, 0, 0],
        [106, 0, 1, 0, 0.456, 0.350, 1.000, 0.000, 0, 0, 0],
        [107, 0, 1, 0, 0.522, 0.449, 1.000, 0.000, 0, 0, 0], # index jump
        [108, 0, 1, 0, 0.408, 0.168, 1.000, 0.000, 0, 0, 0],
        [109, 0, 1, 0, 0.141, 0.134, 1.000, 0.000, 0, 0, 0],
        [110, 0, 1, 0, 0.104, 0.066, 1.000, 0.000, 0, 0, 0],
        [111, 0, 1, 0, 0.096, 0.083, 1.000, 0.000, 0, 0, 0],
        [112, 0, 1, 0, 0.493, 0.419, 1.000, 0.000, 0, 0, 0],
        [113, 0, 1, 0, 0.225, 0.135, 1.000, 0.000, 0, 0, 0],
        [114, 0, 1, 0, 0.509, 0.387, 1.000, 0.000, 0, 0, 0],
        [115, 0, 1, 0, 0.188, 0.173, 1.000, 0.000, 0, 0, 0],
        [116, 0, 1, 0, 0.918, 0.898, 1.000, 0.000, 0, 0, 0],
        [117, 0, 1, 0, 0.305, 0.215, 1.000, 0.000, 0, 0, 0],
        [118, 0, 1, 0, 0.054, 0.040, 1.000, 0.000, 0, 0, 0],
        [119, 0, 1, 0, 0.211, 0.192, 1.000, 0.000, 0, 0, 0],
        [120, 0, 1, 0, 0.067, 0.053, 1.000, 0.000, 0, 0, 0],
        [121, 0, 1, 0, 0.162, 0.090, 1.000, 0.000, 0, 0, 0],
        [122, 0, 1, 0, 0.048, 0.029, 1.000, 0.000, 0, 0, 0],
        [123, 0, 1, 0, 0.033, 0.018, 1.000, 0.000, 0, 0, 0],
        ])

#         No  from-bus  to-bus  R  X                 Pmax       Qmax     if-damage   if-operation
    ppc["line"] = np.array([
        [1, 1, 2, 0.036 / 121, 0.01296 / 121, 50, 50],  # 121 is the base impedance = ((11*1000)**2/1000000)
        [2, 2, 3, 0.033 / 121, 0.01188 / 121, 50, 50],
        [3, 3, 4, 0.045 / 121, 0.0162 / 121, 50, 50],
        [4, 4, 5, 0.015 / 121, 0.054 / 121, 50, 50],
        [5, 5, 6, 0.015 / 121, 0.054 / 121, 50, 50],
        [6, 6, 7, 0.015 / 121, 0.0125 / 121, 50, 50],
        [7, 7, 8, 0.018 / 121, 0.014 / 121, 50, 50],
        [8, 8, 9, 0.021 / 121, 0.063 / 121, 50, 50],
        [9, 2, 10, 0.166 / 121, 0.1344 / 121, 50, 50],
        [10, 10, 11, 0.112 / 121, 0.0789 / 121, 50, 50],
        [11, 11, 12, 0.187 / 121, 0.313 / 121, 50, 50],
        [12, 12, 13, 0.142 / 121, 0.1512 / 121, 50, 50],
        [13, 13, 14, 0.18 / 121, 0.118 / 121, 50, 50],
        [14, 14, 15, 0.15 / 121, 0.045 / 121, 50, 50],
        [15, 15, 16, 0.16 / 121, 0.18 / 121, 50, 50],
        [16, 16, 17, 0.157 / 121, 0.171 / 121, 50, 50],
        [17, 11, 18, 0.218 / 121, 0.285 / 121, 50, 50],
        [18, 18, 19, 0.118 / 121, 0.185 / 121, 50, 50],
        [19, 19, 20, 0.16 / 121, 0.196 / 121, 50, 50],
        [20, 20, 21, 0.12 / 121, 0.189 / 121, 50, 50],
        [21, 21, 22, 0.12 / 121, 0.0789 / 121, 50, 50],
        [22, 22, 23, 1.41 / 121, 0.723 / 121, 50, 50],
        [23, 23, 24, 0.293 / 121, 0.1348 / 121, 50, 50],
        [24, 24, 25, 0.133 / 121, 0.104 / 121, 50, 50],
        [25, 25, 26, 0.178 / 121, 0.134 / 121, 50, 50],
        [26, 26, 27, 0.178 / 121, 0.134 / 121, 50, 50],
        [27, 4, 29, 0.015 / 121, 0.0296 / 121, 50, 50],
        [28, 29, 30, 0.012 / 121, 0.0276 / 121, 50, 50],
        [29, 30, 31, 0.12 / 121, 0.2766 / 121, 50, 50],
        [30, 31, 32, 0.21 / 121, 0.243 / 121, 50, 50],
        [31, 32, 33, 0.12 / 121, 0.054 / 121, 50, 50],
        [32, 33, 34, 0.178 / 121, 0.234 / 121, 50, 50],
        [33, 34, 35, 0.178 / 121, 0.234 / 121, 50, 50],
        [34, 35, 36, 0.154 / 121, 0.162 / 121, 50, 50],
        [35, 31, 37, 0.187 / 121, 0.261 / 121, 50, 50],
        [36, 37, 38, 0.133 / 121, 0.099 / 121, 50, 50],
        [37, 30, 40, 0.33 / 121, 0.194 / 121, 50, 50],
        [38, 40, 41, 0.31 / 121, 0.194 / 121, 50, 50],
        [39, 41, 42, 0.13 / 121, 0.194 / 121, 50, 50],
        [40, 42, 43, 0.28 / 121, 0.15 / 121, 50, 50],
        [41, 43, 44, 1.18 / 121, 0.85 / 121, 50, 50],
        [42, 44, 45, 0.42 / 121, 0.2436 / 121, 50, 50],
        [43, 45, 46, 0.27 / 121, 0.0972 / 121, 50, 50],
        [44, 46, 47, 0.339 / 121, 0.1221 / 121, 50, 50],
        [45, 47, 48, 0.27 / 121, 0.1779 / 121, 50, 50],
        [46, 36, 49, 0.21 / 121, 0.1383 / 121, 50, 50],
        [47, 49, 50, 0.12 / 121, 0.0789 / 121, 50, 50],
        [48, 50, 51, 0.15 / 121, 0.0987 / 121, 50, 50],
        [49, 51, 52, 0.15 / 121, 0.0987 / 121, 50, 50],
        [50, 52, 53, 0.24 / 121, 0.1581 / 121, 50, 50],
        [51, 53, 54, 0.12 / 121, 0.0789 / 121, 50, 50],
        [52, 54, 55, 0.405 / 121, 0.1458 / 121, 50, 50],
        [53, 54, 56, 0.405 / 121, 0.1458 / 121, 50, 50],
        [54, 30, 58, 0.391 / 121, 0.141 / 121, 50, 50],
        [55, 58, 59, 0.406 / 121, 0.1461 / 121, 50, 50],
        [56, 59, 60, 0.406 / 121, 0.1461 / 121, 50, 50],
        [57, 60, 61, 0.706 / 121, 0.5461 / 121, 50, 50],
        [58, 61, 62, 0.338 / 121, 0.1218 / 121, 50, 50],
        [59, 62, 63, 0.338 / 121, 0.1218 / 121, 50, 50],
        [60, 63, 64, 0.207 / 121, 0.0747 / 121, 50, 50],
        [61, 64, 65, 0.247 / 121, 0.8922 / 121, 50, 50],
        [62, 1, 66, 0.028 / 121, 0.0418 / 121, 50, 50],
        [63, 66, 67, 0.117 / 121, 0.2016 / 121, 50, 50],
        [64, 67, 68, 0.255 / 121, 0.0918 / 121, 50, 50],
        [65, 68, 69, 0.21 / 121, 0.0759 / 121, 50, 50],
        [66, 69, 70, 0.383 / 121, 0.138 / 121, 50, 50],
        [67, 70, 71, 0.504 / 121, 0.3303 / 121, 50, 50],
        [68, 71, 72, 0.406 / 121, 0.1461 / 121, 50, 50],
        [69, 72, 73, 0.962 / 121, 0.761 / 121, 50, 50],
        [70, 73, 74, 0.165 / 121, 0.06 / 121, 50, 50],
        [71, 74, 75, 0.303 / 121, 0.1092 / 121, 50, 50],
        [72, 75, 76, 0.303 / 121, 0.1092 / 121, 50, 50],
        [73, 76, 77, 0.206 / 121, 0.144 / 121, 50, 50],
        [74, 77, 78, 0.233 / 121, 0.084 / 121, 50, 50],
        [75, 78, 79, 0.591 / 121, 0.1773 / 121, 50, 50],
        [76, 79, 80, 0.126 / 121, 0.0453 / 121, 50, 50],
        [77, 67, 81, 0.559 / 121, 0.3687 / 121, 50, 50],
        [78, 81, 82, 0.186 / 121, 0.1227 / 121, 50, 50],
        [79, 82, 83, 0.186 / 121, 0.1227 / 121, 50, 50],
        [80, 83, 84, 0.26 / 121, 0.139 / 121, 50, 50],
        [81, 84, 85, 0.154 / 121, 0.148 / 121, 50, 50],
        [82, 85, 86, 0.23 / 121, 0.128 / 121, 50, 50],
        [83, 86, 87, 0.252 / 121, 0.106 / 121, 50, 50],
        [84, 87, 88, 0.18 / 121, 0.148 / 121, 50, 50],
        [85, 82, 89, 0.16 / 121, 0.182 / 121, 50, 50],
        [86, 89, 90, 0.2 / 121, 0.23 / 121, 50, 50],
        [87, 90, 91, 0.16 / 121, 0.393 / 121, 50, 50],
        [88, 68, 93, 0.669 / 121, 0.2412 / 121, 50, 50],
        [89, 93, 94, 0.266 / 121, 0.1227 / 121, 50, 50],
        [90, 94, 95, 0.266 / 121, 0.1227 / 121, 50, 50],
        [91, 95, 96, 0.266 / 121, 0.1227 / 121, 50, 50],
        [92, 96, 97, 0.266 / 121, 0.1227 / 121, 50, 50],
        [93, 97, 98, 0.233 / 121, 0.115 / 121, 50, 50],
        [94, 98, 99, 0.496 / 121, 0.138 / 121, 50, 50],
        [95, 95, 100, 0.196 / 121, 0.18 / 121, 50, 50],
        [96, 100, 101, 0.196 / 121, 0.18 / 121, 50, 50],
        [97, 101, 102, 0.1866 / 121, 0.122 / 121, 50, 50],
        [98, 102, 103, 0.0746 / 121, 0.318 / 121, 50, 50],
        [99, 1, 105, 0.0625 / 121, 0.0265 / 121, 50, 50],
        [100, 105, 106, 0.1501 / 121, 0.234 / 121, 50, 50],
        [101, 106, 107, 0.1347 / 121, 0.0888 / 121, 50, 50],
        [102, 107, 108, 0.2307 / 121, 0.1203 / 121, 50, 50],
        [103, 108, 109, 0.447 / 121, 0.1608 / 121, 50, 50],
        [104, 109, 110, 0.1632 / 121, 0.0588 / 121, 50, 50],
        [105, 110, 111, 0.33 / 121, 0.099 / 121, 50, 50],
        [106, 111, 112, 0.156 / 121, 0.0561 / 121, 50, 50],
        [107, 112, 113, 0.3819 / 121, 0.1374 / 121, 50, 50],
        [108, 113, 114, 0.1626 / 121, 0.0585 / 121, 50, 50],
        [109, 114, 115, 0.3819 / 121, 0.1374 / 121, 50, 50],
        [110, 115, 116, 0.2445 / 121, 0.0879 / 121, 50, 50],
        [111, 115, 117, 0.2088 / 121, 0.0753 / 121, 50, 50],
        [112, 117, 118, 0.2301 / 121, 0.0828 / 121, 50, 50],
        [113, 105, 119, 0.6102 / 121, 0.2196 / 121, 50, 50],
        [114, 119, 120, 0.1866 / 121, 0.127 / 121, 50, 50],
        [115, 120, 121, 0.3732 / 121, 0.246 / 121, 50, 50],
        [116, 121, 122, 0.405 / 121, 0.367 / 121, 50, 50],
        [117, 122, 123, 0.489 / 121, 0.438 / 121, 50, 50],
        [118, 48, 27, 0.5258 / 121, 0.2925 / 121, 50, 50], # tie-line start here (here the id is -1 from the paper)
        [119, 17, 27, 0.5258 / 121, 0.2916 / 121, 50, 50],
        [120, 8, 24, 0.4272 / 121, 0.1539 / 121, 50, 50],
        [121, 56, 45, 0.48 / 121, 0.1728 / 121, 50, 50],
        [122, 65, 56, 0.36 / 121, 0.1296 / 121, 50, 50],
        [123, 38, 65, 0.57 / 121, 0.572 / 121, 50, 50],
        [124, 9, 42, 0.53 / 121, 0.3348 / 121, 50, 50],
        [125, 61, 100, 0.3957 / 121, 0.1425 / 121, 50, 50],
        [126, 76, 95, 0.68 / 121, 0.648 / 121, 50, 50],
        [127, 91, 78, 0.4062 / 121, 0.1464 / 121, 50, 50],
        [128, 103, 80, 0.4626 / 121, 0.1674 / 121, 50, 50],
        [129, 113, 86, 0.651 / 121, 0.234 / 121, 50, 50],
        [130, 110, 89, 0.8125 / 121, 0.2925 / 121, 50, 50],
        [131, 115, 123, 0.7089 / 121, 0.2553 / 121, 50, 50],
        [132, 25, 36, 0.5 / 121, 0.5 / 121, 50, 50]
        ])

    ppc['tieline'] = ['line_118', 'line_119', 'line_120', 'line_121', 'line_122', 'line_123', 'line_124', 'line_125',
                      'line_126', 'line_127', 'line_128', 'line_129', 'line_130', 'line_131', 'line_132']

    #  gen index, gen bus, Pmin, Pmax, Qmin, Qmax
    ppc["gen"] = np.array([
        [1, 1, 0, 100, -100, 100]
    ])

    # call data pre-processing functions
    ppc = get_iterator(ppc)
    ppc = get_bus_line_gen(ppc)
    ppc = get_total_load(ppc)

    return ppc







def case33_tieline_DG():

    # define the network data as a dictionary named ppc
    ppc={}

    ppc["basemva"]=1
# %  0---Load bus, 1---Slack bus,  2---Generator bus
# %        IEEE 33-node feeder
# %        Bus Bus  Voltage Angle   ---Load----        ------Generator-----   Injected
# %        No  code Mag.    Degree   MW       Mvar          MW      Mvar     Qmin Qmax     Mvar
    ppc["bus"] = np.array([
        [1,   1,    1.060,   0.0,     0.016,   0.000,       0.000,   0.000,   0,   0,       0],
        [2,   0,    1.043,   0.0,     0.105,   0.006,       0.000,   0.000,   0,   0,       0],
        [3,   0,    1.000,   0.0,     0.090,   0.040,       0.000,   0.000,   0,   0,       0],
        [4,   0,    1.060,   0.0,     0.120,   0.080,       0.000,   0.000,   0,   0,       0],
        [5,   1,    1.010,   0.0,     0.060,   0.030,       0.000,   0.000,   0,   0,       0],
        [6,   0,    1.0,     0.0,     0.075,   0.020,       0.000,   0.000,   0,   0,       0],
        [7,   0,    1.0,     0.0,     0.240,   0.100,       0.000,   0.000,   0,   0,       0],
        [8,   0,    1.03,    0.0,     0.212,   0.100,       0.000,   0.000,   0,   0,       0],
        [9,   0,    1.0,     0.0,     0.061,   0.020,       0.000,   0.000,   0,   0,       0],
        [10,   1,   1.0,     0.0,     0.072,   0.020,       0.000,   0.000,   0,   0,       0],
        [11,   0,   1.0,     0.0,     0.145,   0.030,       0.000,   0.000,   0,   0,       0],
        [12,   0,   1.0,     0.0,     0.062,   0.035,       0.000,   0.000,   0,   0,       0],
        [13,   0,   1.0,     0.0,     0.063,   0.035,       0.000,   0.000,   0,   0,       0],
        [14,   0,    1,      0,       0.121,   0.080,       0.000,   0.000,   0,   0,       0],
        [15,   1,    1,      0,       0.064,   0.010,       0.000,   0.000,   0,   0,       0],
        [16,   0,    1,      0,       0.065,   0.020,       0.000,   0.000,   0,   0,       0],
        [17,   0,    1,       0,      0.066,   0.020,      0.000,   0.000,   0,   0,       0],
        [18,   0,    1,       0,      0.089,   0.040,      0.000,   0.000,   0,   0,       0],
        [19,   0,    1,       0,      0.092,   0.040,      0.000,   0.000,   0,   0,       0],
        [20,   1,    1,       0,      0.093,   0.040,      0.000,   0.000,   0,   0,       0],
        [21,   0,    1,       0,      0.095,   0.040,      0.000,   0.000,   0,   0,       0],
        [22,   0,    1,       0,      0.096,   0.040,      0.000,   0.000,   0,   0,       0],
        [23,   0,    1,       0,      0.097,   0.050,      0.000,   0.000,   0,   0,       0],
        [24,   0,    1,       0,      0.421,   0.200,      0.000,   0.000,   0,   0,       0],  # active power large
        [25,   1,    1,       0,      0.422,   0.200,      0.000,   0.000,   0,   0,       0],  # active power large
        [26,   0,    1,       0,      0.071,   0.025,      0.000,   0.000,   0,   0,       0],
        [27,   0,    1,       0,      0.067,   0.025,      0.000,   0.000,   0,   0,       0],
        [28,   0,    1,       0,      0.068,   0.020,      0.000,   0.000,   0,   0,       0],
        [29,   0,    1,       0,      0.122,   0.070,      0.000,   0.000,   0,   0,       0],
        [30,   1,    1,       0,      0.201,   0.600,      0.000,   0.000,   0,   0,       0],  # reactive power large
        [31,   0,    1,       0,      0.152,   0.070,      0.000,   0.000,   0,   0,       0],
        [32,   0,    1,       0,      0.213,   0.100,      0.000,   0.000,   0,   0,       0],
        [33,   0,    1,       0,      0.069,   0.040,      1.000,   0.000,   0,   0,       0]
        ])

#         No  from-bus  to-bus  R  X                 Pmax       Qmax     if-damage   if-operation
    ppc["line"] = np.array([
          [1,   1,   2,   0.000574,   0.000293,       5,           5],
          [2,   2,   3,   0.003070,   0.001564,       5,           5],
          [3,   3,   4,   0.002279,   0.001209,       5,           5],
          [4,   4,   5,   0.002373,   0.001209,       5,           5],
          [5,   5,   6,   0.005100,   0.004402,       5,           5],
          [6,   6,   7,   0.001166,   0.003853,       5,           5],
          [7,   7,   8,   0.004430,   0.001464,       5,           5],
          [8,   8,   9,   0.006413,   0.004608,       5,           5],
          [9,   9,   10,  0.006501,   0.004608,       5,           5],
          [10,  10,  11,  0.001224,   0.000405,       5,           5],
          [11,  11,  12,  0.002331,   0.000771,       5,           5],
          [12,  12,  13,  0.009141,   0.007192,       5,           5],
          [13,  13,  14,  0.003372,   0.004439,       5,           5],
          [14,  14,  15,  0.003680,   0.003275,       5,           5],
          [15,  15,  16,  0.004647,   0.003275,       5,           5],
          [16,  16,  17,  0.008026,   0.010716,       5,           5],
          [17,  17,  18,  0.004558,   0.003574,       5,           5],
          [18,  2,   19,   0.001021,   0.000974,      5,           5],
          [19,  19,  20,  0.009366,   0.008440,       5,           5],
          [20,  20,  21,  0.002550,   0.002979,       5,           5],
          [21,  21,  22,  0.004414,   0.005836,       5,           5],
          [22,  3,   23,   0.002809,   0.001920,      5,           5],
          [23,  23,  24,  0.005592,   0.004415,       5,           5],
          [24,  24,  25,  0.005579,   0.004366,       5,           5],
          [25,  6,   26,   0.001264,   0.000644,      5,           5],
          [26,  26,  27,  0.001770,   0.000901,       5,           5],
          [27,  27,  28,  0.006594,   0.005814,       5,           5],
          [28,  28,  29,  0.005007,   0.004362,       5,           5],
          [29,  29,  30,  0.003160,   0.001610,       5,           5],
          [30,  30,  31,  0.006067,   0.005996,       5,           5],
          [31,  31,  32,  0.001933,   0.002253,       5,           5],
          [32,  32,  33,  0.002123,   0.003301,       5,           5],
          [33,  8,   21,   0.012453,   0.012453,      5,           5],  # tie-line
          [34,  9,   15,  0.012453,   0.012453,       5,           5],  # tie-line
          [35,  12,  22,  0.012453,   0.012453,       5,           5],  # tie-line
          [36,  18,  33,  0.003113,   0.003113,       5,           5],  # tie-line
          [37,  25,  29,  0.003113,   0.003113,       5,           5]   # tie-line
        ])

    ppc['tieline'] = ['line_33', 'line_34', 'line_35', 'line_36', 'line_37']

    #  gen index, gen bus, Pmin, Pmax, Qmin, Qmax
    ppc["gen"] = np.array([
        [1, 1, 0, 100, -100, 100],
        [2, 5, 0, 0, -0.2, 0.2],
        [3, 10, 0, 0, -0.2, 0.2],
        [4, 15, 0, 0, -0.2, 0.2],
        [5, 20, 0, 0, -0.2, 0.2],
        [6, 25, 0, 0, -0.2, 0.2],
        [7, 30, 0, 0, -0.2, 0.2]
    ])

    ppc['varcon'] = ['gen_2', 'gen_3', 'gen_4', 'gen_5', 'gen_6', 'gen_7']

    # call data pre-processing functions
    ppc = get_iterator(ppc)
    ppc = get_bus_line_gen(ppc)
    ppc = get_line_bus(ppc)
    ppc = get_total_load(ppc)

    ppc['pos'] = {'bus_1': (1, 0), 'bus_2': (2, 0), 'bus_3': (3, 0), 'bus_4': (4, 0), 'bus_5': (5, 0), 'bus_6': (6, 0),
           'bus_7': (7, 0), 'bus_8': (8, 0), 'bus_9': (9, 0), 'bus_10': (10, 0), 'bus_11': (11, 0), 'bus_12': (12, 0),
           'bus_13': (13, 0), 'bus_14': (14, 0), 'bus_15': (14, 0.2), 'bus_16': (15, 0.2), 'bus_17': (16, 0.2),
           'bus_18': (17, 0.2),
           'bus_19': (2, -0.2), 'bus_20': (2, -0.4), 'bus_21': (3, -0.4), 'bus_22': (4, -0.4),
           'bus_23': (3, 0.2), 'bus_24': (3, 0.4), 'bus_25': (3, 0.6),
           'bus_26': (6, 0.2), 'bus_27': (6, 0.4), 'bus_28': (7, 0.4), 'bus_29': (8, 0.4), 'bus_30': (9, 0.4),
           'bus_31': (10, 0.4),
           'bus_32': (11, 0.4), 'bus_33': (12, 0.4)
           }

    return ppc





# =================== Data pre-processing functions ==================

def get_line_bus(ppc):
    line_bus = {}
    for i in ppc['iter_line']:
        # get the matrix index from the component name
        id = int(i[i.find('_') + 1:])
        idx = np.where(id == ppc['line'][:, 0])[0]
        idx = idx[0]  # the original idx was an array, since bus and line idx is unique, we get the entry
        bus_from = 'bus_{}'.format(int(ppc['line'][idx, 1]))
        bus_to = 'bus_{}'.format(int(ppc['line'][idx, 2]))
        line_bus[i] = [bus_from, bus_to]
    ppc['line_bus'] = line_bus
    return ppc

def get_bus_line_gen(ppc):

    # =================== Tips ====================
    # Here we need to get the integer index from the string like 'bus_13'
    # Assume a = 'bus_13', then int(a[a.find('_')+1:]) = 13
    # =========================================================

    # define a bus line relation dictionary, which the input is bus index and output is branch index
    bus_line = {}
    for i in ppc['iter_bus']:
        # get the matrix index from the component name
        id = int(i[i.find('_') + 1:])

        bus_line[i] = {}
        # find index
        idx_from = np.where(id == ppc['line'][:, 1])[0]  # from bus at index column 1 (starts at 0)
        idx_to = np.where(id == ppc['line'][:, 2])[0]   # to bus at index column 2 (starts at 0)
        bus_line[i]["line_from_this_bus"] = ppc['line'][idx_from, 0]
        bus_line[i]["line_to_this_bus"] = ppc['line'][idx_to, 0]  # from bus at index column 2

    # define a bus generator relation dictionary, which the input is bus index and output is generator index
    bus_gen = {}
    for i in ppc['iter_bus']:
        # get the matrix index from the component name
        id = int(i[i.find('_') + 1:])
        idx = np.where(id == ppc['gen'][:, 1])[0]
        bus_gen[i] = {}
        bus_gen[i] = ppc['gen'][idx, 0]

    ppc['bus_line'] = bus_line
    ppc['bus_gen'] = bus_gen

    return ppc



def get_iterator(ppc):

    # # get size of bus, line and generator
    ppc['number_bus'] = ppc['bus'].shape[0]  # shape returns (row,column)
    ppc['number_line'] = ppc['line'].shape[0]
    ppc['number_gen'] = ppc['gen'].shape[0]

    # # create index for bus, generator and horizon
    ppc['index_bus'] = np.arange(0, ppc['number_bus'])
    ppc['index_line'] = np.arange(0, ppc['number_line'])
    ppc['index_gen'] = np.arange(0, ppc['number_gen'])

    # create name as iterator
    iter_bus = []
    for i in ppc['index_bus']:
        iter_bus.append('bus_{}'.format(int(ppc['bus'][i, 0])))

    iter_line = []
    for i in ppc['index_line']:
        iter_line.append('line_{}'.format(int(ppc['line'][i, 0])))

    iter_gen = []
    for i in ppc['index_gen']:
        iter_gen.append('gen_{}'.format(int(ppc['gen'][i, 0])))

    ppc['iter_bus'] = iter_bus
    ppc['iter_line'] = iter_line
    ppc['iter_gen'] = iter_gen

    return ppc


def get_total_load(ppc):

    ppc['total_P'] = sum(ppc['bus'][i, 4] for i in ppc['index_bus'])
    ppc['total_Q'] = sum(ppc['bus'][i, 5] for i in ppc['index_bus'])

    return ppc